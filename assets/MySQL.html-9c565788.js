import{_ as n,V as s,W as a,$ as p}from"./framework-7d796c00.js";const t="/assets/image-20220420092527846-8e355e40.png",e="/assets/image-20220420090841742-ad5e1eb8.png",o={},c=p('<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h1><h2 id="sql语句" tabindex="-1"><a class="header-anchor" href="#sql语句" aria-hidden="true">#</a> sql语句</h2><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>插入：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>score<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;kerwin&#39;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">//可以不设置id,create_time</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;tiechui&#39;</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>score<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>查所有的数据所有的字段
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span> <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token punctuation">;</span>

查所有的数据某个字段
<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>score<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span> <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token punctuation">;</span>

条件查询
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span> <span class="token keyword">WHERE</span> score<span class="token operator">&gt;=</span><span class="token number">80</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span> <span class="token keyword">where</span> score<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token operator">AND</span> gender<span class="token operator">=</span><span class="token number">1</span>

模糊查询
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>students<span class="token punctuation">\`</span></span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;%k%&#39;</span>

排序
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> score<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> score <span class="token keyword">DESC</span><span class="token punctuation">;</span>

分页查询
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score <span class="token keyword">FROM</span> students <span class="token keyword">LIMIT</span> <span class="token number">50</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span>

记录条数
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> students<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> kerwinnum <span class="token keyword">FROM</span> students<span class="token punctuation">;</span>

多表查询

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students<span class="token punctuation">,</span> classes<span class="token punctuation">;</span>（这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有<span class="token number">100</span>行记录的表进行笛卡尔查询将返回<span class="token number">1</span>万条记录，对两个各自有<span class="token number">1</span>万行记录的表进行笛卡尔查询将返回<span class="token number">1</span>亿条记录）
<span class="token keyword">SELECT</span>
    students<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span>
    students<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    students<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
    students<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
    classes<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span>
    classes<span class="token punctuation">.</span>name cname
<span class="token keyword">FROM</span> students<span class="token punctuation">,</span> classes<span class="token punctuation">;</span> （要使用表名<span class="token punctuation">.</span>列名这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。）

<span class="token keyword">SELECT</span>
    s<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>name cname
<span class="token keyword">FROM</span> students s<span class="token punctuation">,</span> classes c<span class="token punctuation">;</span> （<span class="token keyword">SQL</span>还允许给表设置一个别名）


联表查询
<span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>class_id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score
<span class="token keyword">FROM</span> students s
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> classes c
<span class="token keyword">ON</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span> （连接查询对多个表进行<span class="token keyword">JOIN</span>运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。）


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：</p><blockquote><ol><li>InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li><li>InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败；</li></ol></blockquote><p><strong>外键约束</strong></p><p>CASCADE 在父表上update/delete记录时，同步update/delete掉子表的匹配记录</p><p>SET NULL 在父表上update/delete记录时，将子表上匹配记录的列设为null (要注意子表的外键列不能为not null)</p><p>NO ACTION 如果子表中有匹配的记录,则不允许对父表对应候选键进行update/delete操作</p><p>RESTRICT 同no action, 都是立即检查外键约束</p><h2 id="nodejs-操作数据库" tabindex="-1"><a class="header-anchor" href="#nodejs-操作数据库" aria-hidden="true">#</a> nodejs 操作数据库</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> mysql2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql2&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">getDBConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> promisePool <span class="token operator">=</span> mysql2<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// console.log(promisePool)</span>
      <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> promisePool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;select * from students&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//存在用户</span>
          res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">//不存在</span>
          res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>
              <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;user not exsit&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>      
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token keyword">function</span> <span class="token function">getDBConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;kerwin_test&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">connectionLimit</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">//创建一个连接池</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>查询：
promisePool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

插入：
promisePool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO \`users\`(\`id\`,\`name\`,\`age\`, \`password\`) VALUES (?,?,?,?)&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;kerwin&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

更新：
promisePool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">UPDATE users SET name = ? ,age=? WHERE id = ?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;xiaoming2&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

删除：
promisePool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">delete from users where id=?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),i=[c];function l(u,r){return s(),a("div",null,i)}const d=n(o,[["render",l],["__file","MySQL.html.vue"]]);export{d as default};
